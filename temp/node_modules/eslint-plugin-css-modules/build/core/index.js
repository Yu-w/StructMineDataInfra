'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStyleClasses = exports.getStyleImportNodeData = exports.getPropertyName = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fp = require('lodash/fp');

var _fp2 = _interopRequireDefault(_fp);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _gonzales = require('./gonzales');

var _gonzales2 = _interopRequireDefault(_gonzales);

var _traversalUtils = require('./traversalUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var styleExtensionRegex = /\.(s?css|less)$/;

var getPropertyName = exports.getPropertyName = function getPropertyName(node, camelCase) {
  var propertyName = node.computed
  /*
     square braces eg s['header']
     we won't use node.property.name because it is for cases like
     s[abc] where abc is a variable
   */
  ? node.property.value
  /* dot notation, eg s.header */
  : node.property.name;

  /*
     skip property names starting with _
     eg. special functions provided
     by css modules like _getCss()
      Tried to just skip function calls, but the parser
     thinks of normal property access like s._getCss and
     function calls like s._getCss() as same.
   */
  if (!propertyName || _lodash2.default.startsWith(propertyName, '_')) {
    return null;
  }

  /* Convert to hyphenated if camelCase was used */
  return camelCase ? _lodash2.default.kebabCase(propertyName) : propertyName;
};

var getStyleImportNodeData = exports.getStyleImportNodeData = function getStyleImportNodeData(node) {
  // path from which it was imported
  var styleFilePath = _fp2.default.get('source.value')(node);

  if (styleFilePath && styleExtensionRegex.test(styleFilePath)) {
    var importNode = _fp2.default.compose(_fp2.default.find({ type: 'ImportDefaultSpecifier' }), _fp2.default.get('specifiers'))(node);

    // the default imported name
    var importName = _fp2.default.get('local.name')(importNode);

    if (importName) {
      // it had a default import
      return { importName: importName, styleFilePath: styleFilePath, importNode: importNode };
    }
  }
};

var getStyleClasses = exports.getStyleClasses = function getStyleClasses(filePath) {
  try {
    // check if file exists
    _fs2.default.statSync(filePath);
  } catch (e) {
    return {}; // user will get error like class 'x' not found
  }

  var fileContent = _fs2.default.readFileSync(filePath);

  var syntax = _path2.default.extname(filePath).slice(1); // remove leading .

  var ast = _gonzales2.default.parse(fileContent.toString(), { syntax: syntax });

  if (!ast) {
    // it will be silent and will not show any error
    return null;
  }

  /*
     mutates ast by removing :global scopes
   */
  (0, _traversalUtils.eliminateGlobals)(ast);

  var classesMap = (0, _traversalUtils.getRegularClassesMap)(ast);
  var composedClassesMap = (0, _traversalUtils.getComposesClassesMap)(ast);
  var extendClassesMap = (0, _traversalUtils.getExtendClassesMap)(ast);
  var parentSelectorClassesMap = (0, _traversalUtils.getParentSelectorClassesMap)(ast);

  return _extends({}, classesMap, composedClassesMap, extendClassesMap, parentSelectorClassesMap);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jb3JlL2luZGV4LmpzIl0sIm5hbWVzIjpbInN0eWxlRXh0ZW5zaW9uUmVnZXgiLCJnZXRQcm9wZXJ0eU5hbWUiLCJub2RlIiwiY2FtZWxDYXNlIiwicHJvcGVydHlOYW1lIiwiY29tcHV0ZWQiLCJwcm9wZXJ0eSIsInZhbHVlIiwibmFtZSIsInN0YXJ0c1dpdGgiLCJrZWJhYkNhc2UiLCJnZXRTdHlsZUltcG9ydE5vZGVEYXRhIiwic3R5bGVGaWxlUGF0aCIsImdldCIsInRlc3QiLCJpbXBvcnROb2RlIiwiY29tcG9zZSIsImZpbmQiLCJ0eXBlIiwiaW1wb3J0TmFtZSIsImdldFN0eWxlQ2xhc3NlcyIsImZpbGVQYXRoIiwic3RhdFN5bmMiLCJlIiwiZmlsZUNvbnRlbnQiLCJyZWFkRmlsZVN5bmMiLCJzeW50YXgiLCJleHRuYW1lIiwic2xpY2UiLCJhc3QiLCJwYXJzZSIsInRvU3RyaW5nIiwiY2xhc3Nlc01hcCIsImNvbXBvc2VkQ2xhc3Nlc01hcCIsImV4dGVuZENsYXNzZXNNYXAiLCJwYXJlbnRTZWxlY3RvckNsYXNzZXNNYXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFJQTs7OztBQVFBLElBQU1BLHNCQUFzQixpQkFBNUI7O0FBRU8sSUFBTUMsNENBQWtCLFNBQWxCQSxlQUFrQixDQUFDQyxJQUFELEVBQWVDLFNBQWYsRUFBc0M7QUFDbkUsTUFBTUMsZUFBZUYsS0FBS0c7QUFDeEI7Ozs7O0FBRG1CLElBTWhCSCxLQUFLSSxRQUFMLENBQWNDO0FBQ2hCO0FBUGtCLElBUWhCTCxLQUFLSSxRQUFMLENBQWNFLElBUm5COztBQVVBOzs7Ozs7OztBQVNBLE1BQUksQ0FBQ0osWUFBRCxJQUFpQixpQkFBRUssVUFBRixDQUFhTCxZQUFiLEVBQTJCLEdBQTNCLENBQXJCLEVBQXNEO0FBQ3BELFdBQU8sSUFBUDtBQUNEOztBQUVEO0FBQ0EsU0FBT0QsWUFBWSxpQkFBRU8sU0FBRixDQUFZTixZQUFaLENBQVosR0FBd0NBLFlBQS9DO0FBQ0QsQ0ExQk07O0FBNEJBLElBQU1PLDBEQUF5QixTQUF6QkEsc0JBQXlCLENBQUNULElBQUQsRUFBMkI7QUFDL0Q7QUFDQSxNQUFNVSxnQkFBZ0IsYUFBR0MsR0FBSCxDQUFPLGNBQVAsRUFBdUJYLElBQXZCLENBQXRCOztBQUVBLE1BQUlVLGlCQUFpQlosb0JBQW9CYyxJQUFwQixDQUF5QkYsYUFBekIsQ0FBckIsRUFBOEQ7QUFDNUQsUUFBTUcsYUFBYSxhQUFHQyxPQUFILENBQ2pCLGFBQUdDLElBQUgsQ0FBUSxFQUFFQyxNQUFNLHdCQUFSLEVBQVIsQ0FEaUIsRUFFakIsYUFBR0wsR0FBSCxDQUFPLFlBQVAsQ0FGaUIsRUFHakJYLElBSGlCLENBQW5COztBQUtBO0FBQ0EsUUFBTWlCLGFBQWEsYUFBR04sR0FBSCxDQUFPLFlBQVAsRUFBcUJFLFVBQXJCLENBQW5COztBQUVBLFFBQUlJLFVBQUosRUFBZ0I7QUFBRTtBQUNoQixhQUFPLEVBQUVBLHNCQUFGLEVBQWNQLDRCQUFkLEVBQTZCRyxzQkFBN0IsRUFBUDtBQUNEO0FBQ0Y7QUFDRixDQWpCTTs7QUFtQkEsSUFBTUssNENBQWtCLFNBQWxCQSxlQUFrQixDQUFDQyxRQUFELEVBQStCO0FBQzVELE1BQUk7QUFDRjtBQUNBLGlCQUFHQyxRQUFILENBQVlELFFBQVo7QUFDRCxHQUhELENBR0UsT0FBT0UsQ0FBUCxFQUFVO0FBQ1YsV0FBTyxFQUFQLENBRFUsQ0FDQztBQUNaOztBQUVELE1BQU1DLGNBQWMsYUFBR0MsWUFBSCxDQUFnQkosUUFBaEIsQ0FBcEI7O0FBRUEsTUFBTUssU0FBUyxlQUFLQyxPQUFMLENBQWFOLFFBQWIsRUFBdUJPLEtBQXZCLENBQTZCLENBQTdCLENBQWYsQ0FWNEQsQ0FVWjs7QUFFaEQsTUFBTUMsTUFBTSxtQkFBU0MsS0FBVCxDQUFlTixZQUFZTyxRQUFaLEVBQWYsRUFBdUMsRUFBRUwsY0FBRixFQUF2QyxDQUFaOztBQUVBLE1BQUksQ0FBQ0csR0FBTCxFQUFVO0FBQ1I7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFFRDs7O0FBR0Esd0NBQWlCQSxHQUFqQjs7QUFFQSxNQUFNRyxhQUFhLDBDQUFxQkgsR0FBckIsQ0FBbkI7QUFDQSxNQUFNSSxxQkFBcUIsMkNBQXNCSixHQUF0QixDQUEzQjtBQUNBLE1BQU1LLG1CQUFtQix5Q0FBb0JMLEdBQXBCLENBQXpCO0FBQ0EsTUFBTU0sMkJBQTJCLGlEQUE0Qk4sR0FBNUIsQ0FBakM7O0FBRUEsc0JBQ0tHLFVBREwsRUFFS0Msa0JBRkwsRUFHS0MsZ0JBSEwsRUFJS0Msd0JBSkw7QUFNRCxDQW5DTSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcCBmcm9tICdsb2Rhc2gvZnAnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBnb256YWxlcyBmcm9tICcuL2dvbnphbGVzJztcblxuaW1wb3J0IHR5cGUgeyBKc05vZGUgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7XG4gIGdldFJlZ3VsYXJDbGFzc2VzTWFwLFxuICBnZXRDb21wb3Nlc0NsYXNzZXNNYXAsXG4gIGdldEV4dGVuZENsYXNzZXNNYXAsXG4gIGdldFBhcmVudFNlbGVjdG9yQ2xhc3Nlc01hcCxcbiAgZWxpbWluYXRlR2xvYmFscyxcbn0gZnJvbSAnLi90cmF2ZXJzYWxVdGlscyc7XG5cbmNvbnN0IHN0eWxlRXh0ZW5zaW9uUmVnZXggPSAvXFwuKHM/Y3NzfGxlc3MpJC87XG5cbmV4cG9ydCBjb25zdCBnZXRQcm9wZXJ0eU5hbWUgPSAobm9kZTogSnNOb2RlLCBjYW1lbENhc2UpOiA/c3RyaW5nID0+IHtcbiAgY29uc3QgcHJvcGVydHlOYW1lID0gbm9kZS5jb21wdXRlZFxuICAgIC8qXG4gICAgICAgc3F1YXJlIGJyYWNlcyBlZyBzWydoZWFkZXInXVxuICAgICAgIHdlIHdvbid0IHVzZSBub2RlLnByb3BlcnR5Lm5hbWUgYmVjYXVzZSBpdCBpcyBmb3IgY2FzZXMgbGlrZVxuICAgICAgIHNbYWJjXSB3aGVyZSBhYmMgaXMgYSB2YXJpYWJsZVxuICAgICAqL1xuICAgICA/IG5vZGUucHJvcGVydHkudmFsdWVcbiAgICAgLyogZG90IG5vdGF0aW9uLCBlZyBzLmhlYWRlciAqL1xuICAgICA6IG5vZGUucHJvcGVydHkubmFtZTtcblxuICAvKlxuICAgICBza2lwIHByb3BlcnR5IG5hbWVzIHN0YXJ0aW5nIHdpdGggX1xuICAgICBlZy4gc3BlY2lhbCBmdW5jdGlvbnMgcHJvdmlkZWRcbiAgICAgYnkgY3NzIG1vZHVsZXMgbGlrZSBfZ2V0Q3NzKClcblxuICAgICBUcmllZCB0byBqdXN0IHNraXAgZnVuY3Rpb24gY2FsbHMsIGJ1dCB0aGUgcGFyc2VyXG4gICAgIHRoaW5rcyBvZiBub3JtYWwgcHJvcGVydHkgYWNjZXNzIGxpa2Ugcy5fZ2V0Q3NzIGFuZFxuICAgICBmdW5jdGlvbiBjYWxscyBsaWtlIHMuX2dldENzcygpIGFzIHNhbWUuXG4gICAqL1xuICBpZiAoIXByb3BlcnR5TmFtZSB8fCBfLnN0YXJ0c1dpdGgocHJvcGVydHlOYW1lLCAnXycpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKiBDb252ZXJ0IHRvIGh5cGhlbmF0ZWQgaWYgY2FtZWxDYXNlIHdhcyB1c2VkICovXG4gIHJldHVybiBjYW1lbENhc2UgPyBfLmtlYmFiQ2FzZShwcm9wZXJ0eU5hbWUpIDogcHJvcGVydHlOYW1lO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFN0eWxlSW1wb3J0Tm9kZURhdGEgPSAobm9kZTogSnNOb2RlKTogP09iamVjdCA9PiB7XG4gIC8vIHBhdGggZnJvbSB3aGljaCBpdCB3YXMgaW1wb3J0ZWRcbiAgY29uc3Qgc3R5bGVGaWxlUGF0aCA9IGZwLmdldCgnc291cmNlLnZhbHVlJykobm9kZSk7XG5cbiAgaWYgKHN0eWxlRmlsZVBhdGggJiYgc3R5bGVFeHRlbnNpb25SZWdleC50ZXN0KHN0eWxlRmlsZVBhdGgpKSB7XG4gICAgY29uc3QgaW1wb3J0Tm9kZSA9IGZwLmNvbXBvc2UoXG4gICAgICBmcC5maW5kKHsgdHlwZTogJ0ltcG9ydERlZmF1bHRTcGVjaWZpZXInIH0pLFxuICAgICAgZnAuZ2V0KCdzcGVjaWZpZXJzJyksXG4gICAgKShub2RlKTtcblxuICAgIC8vIHRoZSBkZWZhdWx0IGltcG9ydGVkIG5hbWVcbiAgICBjb25zdCBpbXBvcnROYW1lID0gZnAuZ2V0KCdsb2NhbC5uYW1lJykoaW1wb3J0Tm9kZSk7XG5cbiAgICBpZiAoaW1wb3J0TmFtZSkgeyAvLyBpdCBoYWQgYSBkZWZhdWx0IGltcG9ydFxuICAgICAgcmV0dXJuIHsgaW1wb3J0TmFtZSwgc3R5bGVGaWxlUGF0aCwgaW1wb3J0Tm9kZSB9O1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldFN0eWxlQ2xhc3NlcyA9IChmaWxlUGF0aDogc3RyaW5nKTogP09iamVjdCA9PiB7XG4gIHRyeSB7XG4gICAgLy8gY2hlY2sgaWYgZmlsZSBleGlzdHNcbiAgICBmcy5zdGF0U3luYyhmaWxlUGF0aCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4ge307IC8vIHVzZXIgd2lsbCBnZXQgZXJyb3IgbGlrZSBjbGFzcyAneCcgbm90IGZvdW5kXG4gIH1cblxuICBjb25zdCBmaWxlQ29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCk7XG5cbiAgY29uc3Qgc3ludGF4ID0gcGF0aC5leHRuYW1lKGZpbGVQYXRoKS5zbGljZSgxKTsgLy8gcmVtb3ZlIGxlYWRpbmcgLlxuXG4gIGNvbnN0IGFzdCA9IGdvbnphbGVzLnBhcnNlKGZpbGVDb250ZW50LnRvU3RyaW5nKCksIHsgc3ludGF4IH0pO1xuXG4gIGlmICghYXN0KSB7XG4gICAgLy8gaXQgd2lsbCBiZSBzaWxlbnQgYW5kIHdpbGwgbm90IHNob3cgYW55IGVycm9yXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKlxuICAgICBtdXRhdGVzIGFzdCBieSByZW1vdmluZyA6Z2xvYmFsIHNjb3Blc1xuICAgKi9cbiAgZWxpbWluYXRlR2xvYmFscyhhc3QpO1xuXG4gIGNvbnN0IGNsYXNzZXNNYXAgPSBnZXRSZWd1bGFyQ2xhc3Nlc01hcChhc3QpO1xuICBjb25zdCBjb21wb3NlZENsYXNzZXNNYXAgPSBnZXRDb21wb3Nlc0NsYXNzZXNNYXAoYXN0KTtcbiAgY29uc3QgZXh0ZW5kQ2xhc3Nlc01hcCA9IGdldEV4dGVuZENsYXNzZXNNYXAoYXN0KTtcbiAgY29uc3QgcGFyZW50U2VsZWN0b3JDbGFzc2VzTWFwID0gZ2V0UGFyZW50U2VsZWN0b3JDbGFzc2VzTWFwKGFzdCk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5jbGFzc2VzTWFwLFxuICAgIC4uLmNvbXBvc2VkQ2xhc3Nlc01hcCxcbiAgICAuLi5leHRlbmRDbGFzc2VzTWFwLFxuICAgIC4uLnBhcmVudFNlbGVjdG9yQ2xhc3Nlc01hcFxuICB9O1xufTtcbiJdfQ==