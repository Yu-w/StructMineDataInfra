'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.jscodeshiftExecutable = exports.transformerDirectory = undefined;
exports.executeTransformations = executeTransformations;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const transformerDirectory = exports.transformerDirectory = _path2.default.join(__dirname, '../', 'transformers');
const jscodeshiftExecutable = exports.jscodeshiftExecutable = require.resolve('.bin/jscodeshift');

function executeTransformation(files, flags, transformer, transformerArgs) {
    const transformerPath = _path2.default.join(transformerDirectory, `${transformer}.js`);

    let args = ['-t', transformerPath].concat(files);
    if (flags.dry) {
        args.push('--dry');
    }
    if (['babel', 'babylon', 'flow'].indexOf(flags.parser) >= 0) {
        args.push('--parser', flags.parser);
    }

    if (transformerArgs && transformerArgs.length > 0) {
        args = args.concat(transformerArgs);
    }

    console.log(`Executing command: jscodeshift ${args.join(' ')}`);

    const result = _execa2.default.sync(jscodeshiftExecutable, args, {
        stdio: 'inherit',
        stripEof: false
    });

    if (result.error) {
        throw result.error;
    }
}

function executeTransformations(files, flags, transformers) {
    let transformerOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    transformers.forEach(t => {
        executeTransformation(files, flags, t, transformerOptions);
    });
}