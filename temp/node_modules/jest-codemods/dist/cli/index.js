#!/usr/bin/env node
'use strict';

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _globby = require('globby');

var _globby2 = _interopRequireDefault(_globby);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _meow = require('meow');

var _meow2 = _interopRequireDefault(_meow);

var _updateNotifier = require('update-notifier');

var _updateNotifier2 = _interopRequireDefault(_updateNotifier);

var _gitStatus = require('./git-status');

var _gitStatus2 = _interopRequireDefault(_gitStatus);

var _transformers = require('./transformers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const cli = (0, _meow2.default)({
    description: 'Codemods for migrating test files to Jest.',
    help: `
    Usage
      $ jest-codemods <path> [options]

    path    Files or directory to transform. Can be a glob like src/**.test.js

    Options
      --force, -f   Bypass Git safety checks and forcibly run codemods
      --dry, -d     Dry run (no changes are made to files)
      --parser      The parser to use for parsing your source files (babel | babylon | flow)  [babel]
    `
}, {
    boolean: ['force', 'dry'],
    string: ['_'],
    alias: {
        f: 'force',
        h: 'help',
        d: 'dry'
    }
});

(0, _updateNotifier2.default)({ pkg: cli.pkg }).notify({ defer: false });

const TRANSFORMER_AVA = 'ava';
const TRANSFORMER_CHAI_ASSERT = 'chai-assert';
const TRANSFORMER_CHAI_SHOULD = 'chai-should';
const TRANSFORMER_EXPECT_JS = 'expect-js';
const TRANSFORMER_JASMINE_THIS = 'jasmine-this';
const TRANSFORMER_MOCHA = 'mocha';
const TRANSFORMER_SHOULD = 'should';
const TRANSFORMER_TAPE = 'tape';

const ALL_TRANSFORMERS = [TRANSFORMER_AVA, TRANSFORMER_CHAI_ASSERT,
// TRANSFORMER_CHAI_SHOULD & TRANSFORMER_SHOULD doesn't have import detection
// TODO: waiting for expect@20+ release: TRANSFORMER_EXPECT_1,
TRANSFORMER_EXPECT_JS, TRANSFORMER_MOCHA, TRANSFORMER_TAPE, TRANSFORMER_JASMINE_THIS];

const TRANSFORMER_INQUIRER_CHOICES = [{
    name: 'AVA',
    value: TRANSFORMER_AVA
}, {
    name: 'Chai: Assert Syntax',
    value: TRANSFORMER_CHAI_ASSERT
}, {
    name: 'Chai: Should/Expect BDD Syntax',
    value: TRANSFORMER_CHAI_SHOULD
}, {
    name: 'Expect.js (by Automattic)',
    value: TRANSFORMER_EXPECT_JS
},
/*
// TODO: waiting for expect@20+ release
{
    name: 'Expect@1.x (by mjackson)',
    value: TRANSFORMER_EXPECT_1,
},
*/
{
    name: 'Jasmine: this usage',
    value: TRANSFORMER_JASMINE_THIS
}, {
    name: 'Mocha',
    value: TRANSFORMER_MOCHA
}, {
    name: 'Should.js',
    value: TRANSFORMER_SHOULD
}, {
    name: 'Tape',
    value: TRANSFORMER_TAPE
}, {
    name: 'All of the above (by detecting usage)!',
    value: 'all'
}, {
    name: 'Other',
    value: 'other'
}];

function supportFailure(supportedItems) {
    console.log(`\nCurrently, jest-codemods only has support for ${supportedItems}.`);
    console.log('Feel free to create an issue on https://github.com/skovhus/jest-codemods to contribute!\n');
}

_inquirer2.default.prompt([{
    type: 'list',
    name: 'transformer',
    message: 'Which test library would you like to migrate from?',
    pageSize: TRANSFORMER_INQUIRER_CHOICES.length,
    choices: TRANSFORMER_INQUIRER_CHOICES
},
/*
// TODO: waiting for expect@20+ release
{
    name: 'standaloneMode',
    type: 'list',
    message: 'Should the tests be able to run in a browser?',
    choices: [
        {
            name: 'The tests should run on node.js (recommended)',
            value: false,
        },
        {
            name: 'The tests should run in a browser',
            value: true,
        },
    ],
},
*/
{
    type: 'list',
    name: 'mochaAssertion',
    message: 'Would you like to include assertion transformations with Mocha?',
    when: (_ref) => {
        let transformer = _ref.transformer;
        return TRANSFORMER_MOCHA === transformer;
    },
    choices: [{
        name: 'Chai: Assert Syntax',
        value: TRANSFORMER_CHAI_ASSERT
    }, {
        name: 'Chai: Should/Expect BDD Syntax',
        value: TRANSFORMER_CHAI_SHOULD
    }, {
        name: 'Expect.js (by Automattic)',
        value: TRANSFORMER_EXPECT_JS
    }, {
        name: 'Should.js',
        value: TRANSFORMER_SHOULD
    }, {
        name: 'None',
        value: null
    }]
}, {
    type: 'input',
    name: 'files',
    message: 'On which files or directory should the codemods be applied?',
    when: () => !cli.input.length,
    default: 'src test/**/*.js',
    filter: files => files.trim().split(/\s+/).filter(v => v)
}]).then(answers => {
    const files = answers.files,
          transformer = answers.transformer,
          mochaAssertion = answers.mochaAssertion,
          standaloneMode = answers.standaloneMode;


    if (transformer === 'other') {
        return supportFailure('AVA, Chai, Expect.js, Mocha, Should.js and Tape');
    }

    const transformers = transformer === 'all' ? ALL_TRANSFORMERS : [transformer];

    if (mochaAssertion) {
        transformers.push(mochaAssertion);
    }

    const filesExpanded = cli.input.length ? cli.input : _globby2.default.sync(files);
    if (!filesExpanded.length) {
        console.log(`No files found matching ${files.join(' ')}`);
        return;
    }

    if (!cli.flags.dry) {
        (0, _gitStatus2.default)(cli.flags.force);
    }

    const transformerArgs = [];
    if (standaloneMode) {
        transformerArgs.push('--standaloneMode=true');
        console.log(_chalk2.default.yellow('\nNOTICE: You need to manually install jest-matchers and jest-mock'));
    }

    return (0, _transformers.executeTransformations)(filesExpanded, cli.flags, transformers, transformerArgs);
});